#!/bin/sh
#
# Generic script for updating a {{ admin_type_lowcase }}
#
# Copyright (c) 2013-2018 Alex Williams, Unscramble. See the LICENSE file (MIT).
# http://unscramble.co.jp
#
# VERSION: {{ jidoteki_admin_version }}

set -e

source /etc/profile

tar_cmd=`which tar`
openssl_cmd=`which openssl`
sort_cmd=`which sort`
admin_dir="{{ admin_path }}"
disk_dir="/mnt/sda1"
uploads_dir="${admin_dir}/home/sftp/uploads"
update_log="${admin_dir}/log/update.log"
percentage=0

log_output() {
  tee -a "$update_log"
}

fail_and_exit() {
  update_status "failed"

  echo "[`date +%s`][{{ admin_type }}] Failed updating {{ admin_type_lowcase }}. Cleaning up.." | log_output
  exit 1
}

log_error() {
  umask 022
  echo "[`date +%s`][{{ admin_type }}] $1" | log_output
  echo "$1" > "${admin_dir}/etc/status_error_message.txt"
  echo "$2" > "${admin_dir}/etc/status_error_code.txt"
  chgrp 997 ${admin_dir}/etc/status_error_message.txt ${admin_dir}/etc/status_error_code.txt
  fail_and_exit
}

cleanup() {
  cd "${admin_dir}/tmp"

  rm -rf software_package* update ${disk_dir}/tmp/extracted
  rm -f /tmp/update_vm.sh.task
  [ -f "${uploads_dir}/${latest_package}" ] && rm -f "${uploads_dir}/${latest_package}"
  true
}

update_status() {
  echo "{\"status\":\"${1}\",\"percentage\":${percentage}}" > "${admin_dir}/etc/status_update.json"
  echo "$1" > "${admin_dir}/etc/status_update.txt"
}

touch ${admin_dir}/etc/status_update.txt
chgrp 997 ${admin_dir}/etc/status_update.txt

if [ -f "/tmp/update_vm.sh.task" ]; then
  log_error "Update is already running" "E1004"
fi
echo "$$" > /tmp/update_vm.sh.task

################

# Find the highest version package uploaded to the appliance
find_latest_package() {
  percentage=20
  update_status "running"

  cd "${uploads_dir}"

  # Note: this requires GNU sort from coreutils
  latest_package=`ls software_package-*.enc* | $sort_cmd -V -r | head -n 1`

  if [ ! "$latest_package" ]; then
    log_error "Missing update package" "E1003"
  fi
}

# Decrypt and extract the update package with the updates.key
decrypt_software_package() {
  percentage=30
  update_status "running"

  [ -d "${disk_dir}/tmp" ] || mkdir -p ${disk_dir}/tmp
  [ -d "${disk_dir}/tmp/extracted" ] || mkdir ${disk_dir}/tmp/extracted
  [ -d "${admin_dir}/tmp/update" ] || mkdir ${admin_dir}/tmp/update

  cd "${disk_dir}/tmp"

  umask 027
  # decrypt and extract to fixed disk
  { $openssl_cmd aes-256-cbc -d -pass file:"${admin_dir}/etc/updates.key" -in "${uploads_dir}/${latest_package}" | $tar_cmd -xf - -C extracted; } || log_error "Error decrypting software update package" "E1005"
  percentage=40
  update_status "running"

  # remove package from memory
  rm -f "${uploads_dir}/${latest_package}"

  # verify signature
  $openssl_cmd dgst -sha256 -verify "${admin_dir}/etc/updates.pub" -signature extracted/software_package.tar.gz.sign extracted/software_package.tar.gz  || log_error "Error verifying software update package signature" "E1005"
  percentage=50
  update_status "running"

  # extract contents to memory
  $tar_cmd --no-same-owner --no-same-permissions -zxf extracted/software_package.tar.gz -C ${admin_dir}/tmp/update || log_error "Error extracting software update package" "E1005"

  # remove contents from fixed disk
  rm -rf extracted
}

# Compare the server and package versions
compare_versions() {
  percentage=60
  update_status "running"

  cd "${admin_dir}/tmp/update"

  # Only compare if both files exist
  if [ -f "version.txt" ] && [ -f "${admin_dir}/etc/version.txt" ]; then
    package_version=`cat version.txt`
    server_version=`cat ${admin_dir}/etc/version.txt`

    # Note: this requires GNU sort from coreutils
    latest=`/bin/echo -e "$server_version\n$package_version" | $sort_cmd -V | tail -n 1`

    # Ensure the package isn't too old
    if [ "$latest" != "$package_version" ]; then
      log_error "software update package v${package_version} is too old." "E1001"
    fi

    # Ensure the package isn't the exact same
    if [ "$package_version" = "$server_version" ]; then
      log_error "software update package v${package_version} already up-to-date." "E1001"
    fi
  fi
}

# Update the {{ admin_type_lowcase }} and log the results
update_appliance() {
  percentage=70
  update_status "running"

  cd "${admin_dir}/tmp/update"

  if [ -f "update.sh" ]; then
    echo "Starting update at: `date`" | log_output

    chmod +x update.sh
    if ./update.sh; then
      percentage=80
      update_status "running"

      echo "Completed update at: `date`" | log_output
      return 0
    else
      percentage=80

      if [ -f "${admin_dir}/etc/status_error_message.txt" ] && [ -f "${admin_dir}/etc/status_error_code.txt" ]; then
        fail_and_exit
      else
        log_error "Error running update" "E1002"
      fi
    fi
  else
    percentage=90
    update_status "success"

    echo "[`date +%s`][{{ admin_type }}] No update script found, skipping." | log_output
    exit 0
  fi
}

################

trap cleanup EXIT
trap 'exit 127' INT
trap fail_and_exit SIGINT SIGTERM

# Run all the tasks
[ -f "$update_log" ] || touch "$update_log"
chmod 664 "$update_log"
chown 0:997 "$update_log"

percentage=10
update_status "running"

echo "[`date +%s`][{{ admin_type }}] Updating {{ admin_type_lowcase }}. Please wait.." | log_output

rm -f "${admin_dir}/etc/status_error_message.txt" "${admin_dir}/etc/status_error_code.txt"

find_latest_package       && \
decrypt_software_package  && \
compare_versions          && \
update_appliance          || log_error "Script error" "E1000"

percentage=100
update_status "success"

echo "[`date +%s`][{{ admin_type }}] Update successful" | log_output
exit 0
